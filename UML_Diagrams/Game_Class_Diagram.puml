@startuml
'https://plantuml.com/class-diagram

class Activity {
    String description
    float energy
    float timeUse
    Rectangle zone
    ActivityType type
    'enum ActivityType

    + Activity(float energy, float timeUse, ActivityType type, String description)
    + void set(float x, float y, float width, float height)
    + ActivityType getType()
    + float getEnergy()
    + void setEnergy(float energy)
    + float getTimeUse()
    + void setTimeUse(float timeUse)
    + String getDescription()
    + void setDescription(String description)
    + Rectangle getZone()
}

enum ActivityType{
    EAT
    RECREATION
    SLEEP
    STUDY
}

class HeslingtonHustle{
    + SpriteBatch batch
    + BitmapFont font
    + {static} float Energy
    + {static} float hoursLeft;
    + {static} int Day
    + {static} LocalTime Time
    + Stats stats
    + int {static} MENU = 0
    + int {static} CHARACTER = 1
    + int {static} HOWTOPLAY = 2
    + int {static} GAME = 3
    + int {static} NEWDAY =4
    + int {static} END = 5
    + int {static} PAUSE = 6

    MainMenuScreen menuScreen
    CharacterSelectionScreen characterScreen
    HowToPlayScreen howToPlayScreen
    GameScreen gameScreen
    NewDayScreen newDayScreen
    EndGameScreen endScreen
    PauseScreen pauseScreen

    + void reset()
    + void changeScreen(int screen)
    + void setState(GameState state)
    + GameState getState()

    /'These need to be overwritten
    + void create()
    + void reset()
    + void render()
    + void resize(int width, int height)
    + void pause()
    + void resume()
    + void dispose()
    '/
}

enum GameState{
    MENU
    FREE_ROAM
    ACTIVITY
    END
    }

class Player{
    + {static} String character;
    - TILEDMAPTILELAYER collisionLayer;
    TextureAtlas textureAtlas;
    String direction

    + <<constructor>> Player(TextureAtlas atlas, TiledMapTileLayer gameCollisionLayer)
    + void setTexture(String textureName)
    + boolean collision(int transX, int transY)
    + void moveUp()
    + void moveDown()
    + void moveLeft()
    + void moveRight()
    + void stationary()
    + void dispose()
}

class Stats{
    int study
    int recreation
    int eat
    int studiedYesterday
    List<Dictionary<String, Integer>> days

    + <<constructor>> Stats()
    + void log(Activity.ActivityType type)
    'Log throws an exception, how to include that?
    + Dictionary<String, Integer> getStats()
    + void addDay(Dictionary<String, Integer> day)
    + void newDay()
    + Dictionary<String, Integer> getDay (int index)
    + int[] getTally()
    + void reset()
}

HeslingtonHustle --|> Game
HeslingtonHustle <|-- Stats
HeslingtonHustle --> MainMenuScreen
HeslingtonHustle --> CharacterSelectionScreen
HeslingtonHustle --> HowToPlayScreen
HeslingtonHustle --> GameScreen
HeslingtonHustle --> NewDayScreen
HeslingtonHustle --> EndGameScreen
HeslingtonHustle --> PauseScreen
Player --|> Sprite
@enduml